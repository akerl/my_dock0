#!/usr/bin/env bash

set -e

CONTAINER_NAME=<%= container[:service] %>
IMAGE_NAME=<%= container[:name] %>

NEW_ID="$(docker run -d "$IMAGE_NAME")"
EXISTING_ID="$(docker ps --filter "name=$CONTAINER_NAME" --quiet)"

NEW_IP="$(docker inspect --format='{{.NetworkSettings.IPAddress}}' $NEW_ID)"
NEW_MAC="$(docker inspect --format='{{.NetworkSettings.MacAddress}}' $NEW_ID)"
NEW_PREFIX="<%= @config[:networking][:docker0_ipv6_prefix] %>"
NEW_IPV6="${NEW_PREFIX}$(slacker $NEW_MAC)"

# Remove all old iptables rules
iptables-save \
  | grep -- "--comment $CONTAINER_NAME" \
  | sed 's/^-A/-D/' \
  | xargs -n1 -I{} -d"\n" bash -c "iptables -t nat {}"

ip6tables-save \
  | grep -- "--comment $CONTAINER_NAME" \
  | sed 's/^-A/-D/' \
  | xargs -n1 -I{} -d"\n" bash -c "ip6tables -t nat {}"

# Add new iptables rules

<% (container[:ports] || []).each do |port| %>
<% port[:protocol] ||= 'tcp' %>
<% port[:external] ||= port[:internal] %>
iptables -t nat -I DOCK0 \
  -p <%= port[:protocol] %> \
  --dport <%= port[:external] %> \
  -j DNAT --to-destination "$NEW_IP:<%= port[:internal] %>" \
  -m comment --comment $CONTAINER_NAME

ip6tables -t nat -I DOCK0 \
  -p <%= port[:protocol] %> \
  --dport <%= port[:external] %> \
  -j DNAT --to-destination "[$NEW_IPV6]:<%= port[:internal] %>" \
  -m comment --comment $CONTAINER_NAME
<% end %>

if [ -n "$EXISTING_ID" ] ; then
  docker kill $EXISTING_ID
  docker rm $EXISTING_ID
fi

docker rename $NEW_ID $CONTAINER_NAME

docker wait $NEW_ID

